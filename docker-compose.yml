version: '3.8'

services:
  # -----------------------------
  # Zookeeper (necesario para Kafka)
  # -----------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-net

  # -----------------------------
  # Kafka Broker
  # -----------------------------
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-net

  # -----------------------------
  # Eureka Server
  # -----------------------------
  eureka-server:
    image: eurekaserver:latest
    build:
      context: ./eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  # -----------------------------
  # Spring Cloud Config Server
  # -----------------------------
  config-server:
    image: configserver:latest
    build:
      context: ./config-server
    ports:
      - "8888:8888"
    volumes:
      - ./config-repo:/config-repo
    networks:
      - microservices-net

  # -----------------------------
  # Spring Cloud Gateway
  # -----------------------------
  gateway:
    image: gateway:latest
    build:
      context: ./gateway
    depends_on:
      - eureka-server
      - config-server
    ports:
      - "8080:8080"
    networks:
      - microservices-net

  # -----------------------------
  # Zipkin for tracing
  # -----------------------------
  zipkin:
    image: openzipkin/zipkin:2.24
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  # -----------------------------
  # Prometheus
  # -----------------------------
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices-net

  # -----------------------------
  # Grafana
  # -----------------------------
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - microservices-net

  # -----------------------------
  # Loki for centralized logs
  # -----------------------------
  loki:
    image: grafana/loki:2.9.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - microservices-net

  # -----------------------------
  # Promtail to ship logs to Loki
  # -----------------------------
  promtail:
    image: grafana/promtail:2.9.1
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - microservices-net

  # -----------------------------
  # Order Service
  # -----------------------------
  order-service:
    image: orderservice:latest
    build:
      context: ./order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - kafka
      - eureka-server
      - config-server
      - zipkin
    networks:
      - microservices-net

  # -----------------------------
  # Inventory Service (3 replicas)
  # -----------------------------
  inventory-service:
    image: inventoryservice:latest
    build:
      context: ./inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - kafka
      - eureka-server
      - config-server
      - zipkin
    deploy:
      replicas: 3
    networks:
      - microservices-net

  # -----------------------------
  # Notification Service
  # -----------------------------
  notification-service:
    image: notificationservice:latest
    build:
      context: ./notification-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - kafka
      - eureka-server
      - config-server
      - zipkin
    networks:
      - microservices-net

# -----------------------------
# Network definition
# -----------------------------
networks:
  microservices-net:
    driver: bridge
