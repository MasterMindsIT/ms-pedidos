#version: '3.8'

services:
  # -----------------------------
  # Zookeeper (necesario para Kafka)
  # -----------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181"] # Simple check for Zookeeper
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # Give Zookeeper some time to start

  # -----------------------------
  # Kafka Broker
  # -----------------------------
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      zookeeper:
        condition: service_healthy # Kafka waits for Zookeeper to be healthy
    ports:
      - "9092:9092"
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"] # Check Kafka connectivity
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Kafka takes a bit longer to be fully ready

  # -----------------------------
  # Spring Cloud Config Server
  # -----------------------------
  config-server:
    image: configserver:latest
    build:
      context: ./config-server
    ports:
      - "8888:8888"
    volumes:
      - ./config-repo:/config-repo
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"] # Standard Spring Boot Actuator health check
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give it time to load configs

  # -----------------------------
  # Eureka Server
  # -----------------------------
  eureka-server:
    image: eurekaserver:latest
    build:
      context: ./eureka-server
    depends_on:
      config-server:
        condition: service_healthy # Eureka needs Config Server to get its config
    ports:
    - "8761:8761"
    restart: unless-stopped
    networks:
    - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"] # Standard Spring Boot Actuator health check
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give Eureka time to initialize

  # -----------------------------
  # Zipkin for tracing
  # -----------------------------
  zipkin:
    image: openzipkin/zipkin:2.24
    ports:
      - "9411:9411"
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9411/health"] # Zipkin health endpoint
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # -----------------------------
  # Prometheus
  # -----------------------------
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/ready"] # Prometheus ready check
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # -----------------------------
  # Grafana
  # -----------------------------
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/dashboards
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      # Usamos wget en lugar de curl, por si la imagen de Grafana no lo tiene
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost:3000/api/health || exit 1"] # Grafana API health check
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # -----------------------------
  # Loki for centralized logs
  # -----------------------------
  loki:
    image: grafana/loki:2.9.1
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      # Usamos wget en lugar de curl
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost:3100/ready || exit 1"] # Loki ready check
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # -----------------------------
  # Promtail to ship logs to Loki
  # -----------------------------
  promtail:
    image: grafana/promtail:2.9.1
    depends_on:
      loki:
        condition: service_healthy # Promtail needs Loki to be ready
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yml
      - ./promtail/data:/var/lib/promtail
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      # Usamos wget en lugar de curl
      test: ["CMD-SHELL", "wget -q -O /dev/null http://localhost:9080/ready || exit 1"] # Promtail readiness endpoint (default port if not changed in config)
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


  # -----------------------------
  # Order Service
  # -----------------------------
  order-service:
    image: orderservice:latest
    build:
      context: ./order-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411
    depends_on:
      eureka-server:
        condition: service_healthy # Es CRÍTICO que Eureka esté listo para el registro
      config-server:
        condition: service_healthy # Es CRÍTICO para obtener la configuración
      # Kafka y Zipkin: Los servicios pueden iniciar y manejar reconexiones si no están listos
      kafka:
        condition: service_started # Solo esperamos que el contenedor haya iniciado
      zipkin:
        condition: service_started # Solo esperamos que el contenedor haya iniciado
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # -----------------------------
  # Inventory Service (3 replicas)
  # -----------------------------
  inventory-service:
    image: inventoryservice:latest
    build:
      context: ./inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
      zipkin:
        condition: service_started
    deploy:
      replicas: 1
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # -----------------------------
  # Notification Service
  # -----------------------------
  notification-service:
    image: notificationservice:latest
    build:
      context: ./notification-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_ZIPKIN_BASEURL: http://zipkin:9411
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
      zipkin:
        condition: service_started
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # -----------------------------
  # Spring Cloud Gateway
  # -----------------------------
  gateway:
    image: gateway:latest
    build:
      context: ./gateway
    # El Gateway DEBE esperar a que los servicios esenciales estén registrados en Eureka
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      # Los microservicios de negocio: Aquí es donde podemos ser más flexibles.
      # No necesitas que *todos* estén healthy para que el Gateway inicie.
      # Un gateway suele configurarse para que si un servicio no está disponible, no le envíe tráfico,
      # pero no necesariamente detener el propio gateway.
      # Considera si realmente necesitas que todos los servicios estén HEALTHY antes de que el gateway arranque.
      # Si el gateway puede manejar que algunos servicios no estén listos al inicio y los descubra más tarde,
      # puedes usar 'service_started' o incluso omitir la dependencia si el descubrimiento es dinámico.
      # Para un proyecto educativo y para asegurar un arranque más completo,
      # mantener 'service_healthy' para uno o dos servicios críticos puede ser útil.
      # He dejado 'order-service' como healthy y los demás como 'service_started' para ilustrar la flexibilidad.
      order-service: # El Gateway espera a que AL MENOS un servicio de negocio esté listo para demostrar la funcionalidad
        condition: service_healthy
      inventory-service:
        condition: service_started # No es tan crítico que todos estén HEALTHY para que el Gateway inicie.
      notification-service:
        condition: service_started # El Gateway puede descubrir estos servicios más tarde via Eureka.
    ports:
      - "8080:8080" # Ojo, si tus MS usan el 8080, el gateway usará ese mismo puerto, podría haber conflicto en el host.
    restart: unless-stopped
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"] # Ajusta el puerto si tu gateway usa otro
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s # El Gateway puede tardar en registrar sus rutas después que los servicios están en Eureka

  k6:
    image: grafana/k6
    volumes:
      - ./k6-scripts:/scripts
    entrypoint: ["k6", "run", "/scripts/scripts.js"]
    #entrypoint: ["/bin/sh", "-c"]
    # command:
    #   - |
    #     while true; do
    #     echo "📂 Contenido de /scripts:"
    #     ls -la /scripts
    #     echo "⌛ Esperando 40 segundos..."
    #     sleep 40
    #     done
    tty: true
    restart: unless-stopped
    networks:
      - microservices-net
    depends_on:
      gateway: # k6 debería esperar a que el Gateway esté listo para las pruebas de carga
        condition: service_healthy

# -----------------------------
# Network definition
# -----------------------------
networks:
  microservices-net:
    driver: bridge